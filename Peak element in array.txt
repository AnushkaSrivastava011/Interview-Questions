Peak element
(Element which is greater than it's neibouring elements)
Input: array[]= {5, 10, 20, 15}
Output: 20
The element 20 has neighbours 10 and 15,
both of them are less than 20.
Given an array A of N integers. The task is to find a peak element in it in O( log N ) .
An array element is peak if it is not smaller than its neighbours. For corner elements, we need to consider only one neighbour.
Note: There may be multiple peak element possible, in that case you may return any valid index (0 based indexing).

Example 1:

Input:
N = 3
A[] = {1,2,3}
Output: 1
Explanation: In the given array, 
3 is the peak element as it is 
greater than its neighbour.

Efficient Approach O(logn)

import java.util.*;
class PeakElement{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while(t-->0){
			int n=sc.nextInt();
			int[] a=new int[n];
			for(int i=0;i<n;i++)
				a[i]=sc.nextInt();
		
			int A=new Peak().peakElement(a,n);
			int f=0;
			if(n==1)
			f=1;
			else
      if(A==0 && a[0]>=a[1])
			f=1;
			else if(A==n-1 && a[n-1]>=a[n-2])
			f=1;
			else if(a[A] >=a[A+1] && a[A]>= a[A-1])
			f=1;
			else
			f=0;
			System.out.println(f);
		}
	}
}// }

class Peak
{
	// Function to find the peak element
	// a[]: input array
	// n: size of array a[]
	int findPeakUtil(int arr[], int low, int high, int n)
{

int mid = (low+high)>>1;

// if mid is last or first index with first element
// greater than next.
// Also, check if mid element is greater than mid - 1 and mid+1
if ((mid == 0 || arr[mid-1] <= arr[mid]) &&
(mid == n-1 || arr[mid+1] <= arr[mid]))
return mid;

// If mid is other than 0, then check if mid element is less than prev.
// If so, then recurse for lower half
else if (mid > 0 && arr[mid-1] > arr[mid])
return findPeakUtil(arr, low, (mid -1), n);

// else recurse for the upper half
else return findPeakUtil(arr, (mid + 1), high, n);
}
import java.util.*;
class PeakElement{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while(t-->0){
			int n=sc.nextInt();
			int[] a=new int[n];
			for(int i=0;i<n;i++)
				a[i]=sc.nextInt();
		
			int A=new Peak().peakElement(a,n);
			int f=0;
			if(n==1)
			f=1;
			else
int peakElement(int arr[], int n)
{
return findPeakUtil(arr, 0, n-1, n);
}
}
